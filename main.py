import ccxt
import pandas as pd
import time

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit —Ñ—å—é—á–µ—Ä—Å—ã
exchange = ccxt.bybit({'options': {'defaultType': 'future'}})

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—ã–Ω–∫–∏
markets = exchange.load_markets()
usdt_pairs = [s for s in markets if s.endswith('/USDT')]

# –ë–µ—Ä—ë–º 50 –ø–∞—Ä (–∏–ª–∏ —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ ‚Äî –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å)
symbols = usdt_pairs[:50]

# –°–∫–∞—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—ã
def get_closes(symbol):
    try:
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe='1h', limit=500)
        closes = [candle[4] for candle in ohlcv]  # close
        return closes
    except Exception as e:
        print(f"{symbol} ‚Äî –æ—à–∏–±–∫–∞: {e}")
        return None

# –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
data = {}
for symbol in symbols:
    print(f"–ó–∞–≥—Ä—É–∂–∞—é {symbol}...")
    closes = get_closes(symbol)
    if closes and len(closes) == 500:
        data[symbol] = closes
    time.sleep(1.2)  # –ø–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –æ—Ç—Ä—É–±–∏–ª–∏ API

# –°—Ç—Ä–æ–∏–º —Ç–∞–±–ª–∏—Ü—É
df = pd.DataFrame(data)
print("\nüéØ –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫—Ä—ã—Ç–∏–π —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞:")
print(df.tail())

# –†–∞—Å—á—ë—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
corr = df.corr(method='pearson')

# –ü–æ–∏—Å–∫ –Ω–∏–∑–∫–æ–∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä
low_corr_pairs = []

symbols = corr.columns
for i in range(len(symbols)):
    for j in range(i + 1, len(symbols)):
        a = symbols[i]
        b = symbols[j]
        val = corr.loc[a, b]
        if abs(val) < 0.3:
            low_corr_pairs.append((a, b, round(val, 3)))

# –í—ã–≤–æ–¥
print("\nüßä –ü–∞—Ä—ã —Å –Ω–∏–∑–∫–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π (|corr| < 0.3):")
for a, b, c in sorted(low_corr_pairs, key=lambda x: abs(x[2])):
    print(f"{a} ‚Äî {b} : {c}")